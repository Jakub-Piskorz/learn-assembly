     1                                  ; io2.asm
     2                                  section .data
     3 00000000 48656C6C6F20776F72-         msg1    db  "Hello world!", 10, 0
     3 00000009 6C64210A00         
     4 0000000E 596F7572207475726E-         msg2    db  "Your turn (only a-z): ", 0
     4 00000017 20286F6E6C7920612D-
     4 00000020 7A293A2000         
     5 00000025 596F7520616E736572-         msg3    db  "You ansered: ", 0
     5 0000002E 65643A2000         
     6                                      inputlen    equ 10
     7 00000033 0A                          NL  db  0xa
     8                                  section .bss
     9 00000000 <res Bh>                    input   resb    inputlen+1
    10                                  section .text
    11                                      global main
    12                                  main:
    13 00000000 55                      push rbp
    14 00000001 4889E5                  mov rbp, rsp
    15 00000004 48BF-                       mov rdi, msg1
    15 00000006 [0000000000000000] 
    16 0000000E E852000000                  call prints
    17 00000013 48BF-                       mov rdi, msg2
    17 00000015 [0E00000000000000] 
    18 0000001D E843000000                  call prints
    19 00000022 48BF-                       mov rdi, input
    19 00000024 [0000000000000000] 
    20 0000002C BE0A000000                  mov rsi, inputlen
    21 00000031 E863000000                  call reads
    22 00000036 48BF-                       mov rdi, msg3
    22 00000038 [2500000000000000] 
    23 00000040 E820000000                  call prints
    24 00000045 48BF-                       mov rdi, input
    24 00000047 [0000000000000000] 
    25 0000004F E811000000                  call prints
    26 00000054 48BF-                       mov rdi, NL
    26 00000056 [3300000000000000] 
    27 0000005E E802000000                  call prints
    28 00000063 C9                      leave
    29 00000064 C3                      ret
    30                                  
    31                                  prints:
    32 00000065 55                      push rbp
    33 00000066 4889E5                  mov rbp, rsp
    34 00000069 4154                        push r12    ; Callee saved
    35                                      ; Count characters
    36 0000006B 4831D2                      xor rdx, rdx    ; Length here
    37 0000006E 4989FC                      mov r12, rdi    ; Char address here
    38                                      .stringIterate:
    39 00000071 41803C2400                      cmp byte [r12], 0
    40 00000076 7408                            je .lengthfound
    41 00000078 48FFC2                          inc rdx
    42 0000007B 49FFC4                          inc r12
    43 0000007E EBF1                            jmp .stringIterate
    44                                      .lengthfound:       ; Print the string, length in rdx
    45 00000080 4883FA00                        cmp rdx, 0      ; In case of empty string
    46 00000084 740F                            je .done
    47 00000086 4889FE                          mov rsi, rdi    ; rdi: address of string
    48 00000089 B801000000                      mov rax, 1      ; write
    49 0000008E BF01000000                      mov rdi, 1      ; stdout
    50 00000093 0F05                            syscall
    51                                      .done:
    52 00000095 415C                            pop r12
    53 00000097 C9                      leave
    54 00000098 C3                      ret
    55                                  
    56                                  reads:
    57                                  section .data
    58                                  section .bss
    59 0000000B ??                          .inputchar  resb    1
    60                                  section .text
    61 00000099 55                      push rbp
    62 0000009A 4889E5                  mov rbp, rsp
    63 0000009D 4154                        push r12
    64 0000009F 4155                        push r13
    65 000000A1 4156                        push r14
    66 000000A3 4989FC                      mov r12, rdi    ; Address of inputbuffer
    67 000000A6 4989F5                      mov r13, rsi    ; Max length
    68 000000A9 4D31F6                      xor r14, r14    ; Character counter
    69                                      .readc:
    70 000000AC B800000000                      mov rax, 0      ; read
    71 000000B1 BF01000000                      mov rdi, 1      ; stdin
    72 000000B6 48BE-                           mov rsi, .inputchar
    72 000000B8 [0B00000000000000] 
    73 000000C0 BA01000000                      mov rdx, 1      ; # of characters to read
    74 000000C5 0F05                            syscall
    75 000000C7 8A0425[0B000000]                mov al, [.inputchar]    ; Char is NL?
    76 000000CE 3A0425[33000000]                cmp al, byte[NL]
    77 000000D5 7419                            je  .done               ; NL end
    78 000000D7 3C61                            cmp al, 97              ; Lower than a?
    79 000000D9 7CD1                            jl  .readc              ; Ignore
    80 000000DB 3C7A                            cmp al, 122             ; Higher than z?
    81 000000DD 7FCD                            jg  .readc              ; Ignore
    82 000000DF 49FFC6                          inc r14
    83 000000E2 4D39EE                          cmp r14, r13
    84 000000E5 77C5                            ja  .readc              ; Buffer max reached, ignore
    85 000000E7 41880424                        mov byte [r12], al      ; Save the chat in the buffer
    86 000000EB 49FFC4                          inc r12                 ; Next char address
    87 000000EE EBBC                            jmp .readc
    88                                      .done:
    89 000000F0 49FFC4                          inc r12 ; Manually adding 0 to end the string.
    90 000000F3 41C6042400                      mov byte [r12], 0
    91 000000F8 415E                            pop r14
    92 000000FA 415D                            pop r13
    93 000000FC 415C                            pop r12
    94 000000FE C9                      leave
    95 000000FF C3                      ret
